
@startuml

	' ' Main Components
    ' class Component
    ' class MonoBehaviour
    ' class Terrain
    
    ' ' Draw SkyBox and Evironment Mapping   
    ' ' SkyBox 랜더링과 환경 매핑을 담당하는 클래스
    ' class SkyBox

    ' ' Terrain Compos
    ' class ObjectManager
    ' class HeightMap
    ' class Picking
    ' class Splatting

    ' ' Tree
    ' class SectionNode
    ' class SpaceDivideTree
    ' class StaticLOD

    ' ' Renderer
    ' ' 싱글톤이 아니라 그냥 Terrain에 박아도 될듯 
    ' class EnvironmentRenderer << (S,#FF7700) Singleton >>

    ' Component <|-- MonoBehaviour
    ' MonoBehaviour <|-- Terrain
    ' MonoBehaviour <|-- SkyBox

    ' Terrain *-- HeightMap
    ' Terrain *-- Picking
    ' Terrain *-- Splatting
    ' Terrain *-- SpaceDivideTree

    ' ' 나중에 EnvironmentRenderer(singleton)를 만들어 쉐도우 기능을 이전하고 환경매핑은 skybox에서 
    ' ' mapRenderer는 삭제 예정
    ' Terrain *-- mapRenderer 

    ' SpaceDivideTree *-- SectionNode
    ' SpaceDivideTree *-- StaticLOD

    ' ' 현재 map에 배치 되는 object는 node와 연관성이 없으니 ObjectManager를 이전해도 무방할듯
    ' ' 하지만 나중에 object를 배치할때 node를 참조해야 할수도 있으니 일단 연결
    ' SpaceDivideTree *-- ObjectManager 

	' Main Components
    class Component
    {
        #CompoonentType type
        #std::weak_ptr<GameObject> owner

        +virtual void Init()
        +virtual void Update()
        +virtual void Render()
        +virtual void Release()
    }
    class MonoBehaviour
    class Terrain
    {
        +TerrainData
	    +std::vector<PNCTVertex> vertices;
	    +std::vector<UINT> indices;
    	+std::shared_ptr<Shader> shader;
    	+std::shared_ptr<Texture> texture;

        +void Init() override
        +void Update() override
        +void Render() override
    }
    
    ' Draw SkyBox and Evironment Mapping   
    ' SkyBox 랜더링과 환경 매핑을 담당하는 클래스
    class SkyBox
    {
    	-std::shared_ptr<Shader> shader;
    	-std::shared_ptr<Texture> texture;
    	-std::shared_ptr<Mesh> skyMesh;

        +void Render() override
    }

    ' Terrain Compos
    class ObjectManager
    {       
	    +std::shared_ptr<Shader> shader
	    +std::vector<std::shared_ptr<GameObject>> objectList
	    +std::vector<std::string> objectModelNameList
	    +int objectCount = 0

    	+void SpawnObject(Vector3& spawnPoint)
    	+void ObjectPicking(Ray& ray)
    }
    class HeightMap
    {
	    -HeightMode mode;
	    -std::shared_ptr<Texture> heightMapTexture
	    +std::vector<float> heightList
    }
    class Picking
    {
    	+std::vector<UINT> UpdateVertexIdxList
    	+std::vector<SHORT> UpdateNodeIdxList

        +void FindChangeVertex()
        +std::shared_ptr<SectionNode>& FindPickFace()
    }
    class Splatting
    {
    	-std::shared_ptr<Shader> shader
    	-std::shared_ptr<Texture> alphaTexture
    	-std::shared_ptr<Texture> texture1
    	-std::shared_ptr<Texture> texture2
    	-std::shared_ptr<Texture> texture3
    	-std::shared_ptr<Texture> texture4

        +void TillingTexture()
        +void Init()
    }

    struct LODData
    {
    	+DWORD level
    	+std::vector<std::vector<UINT>>	indicesList
    	+std::vector<std::shared_ptr<IndexBuffer>>	indexBufferList
    }

    ' Tree
    class SectionNode
    {
	    +Cube boundingBox
	    +Vector2 element
	    +std::weak_ptr<SectionNode> parentNode
	    +std::shared_ptr<Shader> shader
	    +std::shared_ptr<VertexBuffer> vertexBuffer
	    +std::shared_ptr<IndexBuffer> indexBuffer
	    +std::vector<PNCTVertex> vertices
	    +std::vector<UINT> cornerIndexList
	    +std::vector<std::shared_ptr<SectionNode>> childNodeList
	    +std::vector<std::shared_ptr<SectionNode>> neighborNodeList
        
    	+void SetVertexBuffer()
    	+void UpdateVertexBuffer()
    	+void SetBoundingBox()
    	+void Render()
    	+void Release()
    }

    class SpaceDivideTree
    {
    	+int maxDepth
    	+std::weak_ptr<Terrain> terrain
    	+std::shared_ptr<SectionNode> root
    	+std::map<int, std::shared_ptr<SectionNode>> leafNodeMap
    	+std::vector<int> drawNodeIndexList

	    -void FindDrawNode()
	    -void UpdateVertexList(std::shared_ptr<SectionNode> pNode)
        -void BuildTree(std::shared_ptr<SectionNode> pNode)
	    +void Init(std::shared_ptr<Terrain> owner)
	    +void Update();
	    +void Render()
    }
    class StaticLOD
    {
	    +DWORD cellNum
	    +DWORD patchLodCount
	    +std::vector<std::shared_ptr<LODData>> lodDataList

        
    	+void SetLod(DWORD width, DWORD numDepth)
    	+std::shared_ptr<IndexBuffer>& GetLodIndexBuffer(std::shared_ptr<SectionNode>& pNode)
    	+void Release()
    }

    ' Renderer
    ' 싱글톤이 아니라 그냥 Terrain에 박아도 될듯 
    ' class EnvironmentRenderer << (S,#FF7700) Singleton >>

    Component <|-- MonoBehaviour
    MonoBehaviour <|-- Terrain
    MonoBehaviour <|-- SkyBox

    Terrain <-- HeightMap
    Terrain <-- Picking
    Terrain <-- Splatting
    Terrain <-- SpaceDivideTree

    ' 나중에 EnvironmentRenderer(singleton)를 만들어 쉐도우 기능을 이전하고 환경매핑은 skybox에서 
    ' mapRenderer는 삭제 예정

    SpaceDivideTree <.. SectionNode
    SpaceDivideTree <-- StaticLOD
    StaticLOD *-- LODData

    ' 현재 map에 배치 되는 object는 node와 연관성이 없으니 ObjectManager를 이전해도 무방할듯
    ' 하지만 나중에 object를 배치할때 node를 참조해야 할수도 있으니 일단 연결
    SpaceDivideTree *-- ObjectManager 


@enduml